{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\preet\\\\Desktop\\\\charity\\\\donation\\\\src\\\\components\\\\AddDonation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/AddDonation.css'; // Ensure this file exists\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddDonation = () => {\n  _s();\n  const [amount, setAmount] = useState(''); // Amount in rupees\n  const [charityId, setCharityId] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const token = localStorage.getItem('token');\n\n      // Step 1: Create Razorpay order by sending amount to backend\n      const response = await axios.post('http://localhost:5000/api/create-order', {\n        amount: amount * 100,\n        currency: 'INR'\n      },\n      // Convert amount to paise and set currency to INR\n      {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const {\n        id: orderId,\n        currency,\n        amount: orderAmount\n      } = response.data; // orderAmount is in paise\n\n      // Step 2: Configure Razorpay payment options\n      const options = {\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID,\n        amount: orderAmount,\n        // Amount is already in paise (received from backend)\n        currency: currency,\n        name: 'Charity Donation',\n        description: 'Donate to charity',\n        order_id: orderId,\n        handler: async response => {\n          try {\n            await axios.post('http://localhost:5000/api/donations', {\n              amount: orderAmount / 100,\n              // Convert amount from paise to rupees for storing in the database\n              charityId,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpayOrderId: response.razorpay_order_id,\n              razorpaySignature: response.razorpay_signature\n            }, {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            alert('Donation successful!');\n            navigate('/donations'); // Redirect to donations list page\n          } catch (error) {\n            console.error('Error completing donation:', error);\n            alert('Error completing donation. Please try again.');\n          }\n        },\n        prefill: {\n          name: '',\n          // Optionally prefill with user's name and email\n          email: ''\n        },\n        theme: {\n          color: '#3399cc'\n        }\n      };\n\n      // Step 4: Open the Razorpay payment window\n      const paymentObject = new window.Razorpay(options);\n      paymentObject.open();\n    } catch (error) {\n      console.error('Error creating order:', error);\n      alert('Error creating donation order. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-donation\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Donation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Amount (INR)\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Charity ID\",\n        value: charityId,\n        onChange: e => setCharityId(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Donation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(AddDonation, \"fHpcIZNNg0ejhsEIrsD/Eqf04DU=\", false, function () {\n  return [useNavigate];\n});\n_c = AddDonation;\nexport default AddDonation;\nvar _c;\n$RefreshReg$(_c, \"AddDonation\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","AddDonation","_s","amount","setAmount","charityId","setCharityId","navigate","handleSubmit","e","preventDefault","token","localStorage","getItem","response","post","currency","headers","Authorization","id","orderId","orderAmount","data","options","key","process","env","REACT_APP_RAZORPAY_KEY_ID","name","description","order_id","handler","razorpayPaymentId","razorpay_payment_id","razorpayOrderId","razorpay_order_id","razorpaySignature","razorpay_signature","alert","error","console","prefill","email","theme","color","paymentObject","window","Razorpay","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/preet/Desktop/charity/donation/src/components/AddDonation.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/AddDonation.css'; // Ensure this file exists\r\n\r\nconst AddDonation = () => {\r\n  const [amount, setAmount] = useState(''); // Amount in rupees\r\n  const [charityId, setCharityId] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      \r\n      // Step 1: Create Razorpay order by sending amount to backend\r\n      const response = await axios.post(\r\n        'http://localhost:5000/api/create-order',\r\n        { amount: amount * 100, currency: 'INR' }, // Convert amount to paise and set currency to INR\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const { id: orderId, currency, amount: orderAmount } = response.data; // orderAmount is in paise\r\n\r\n      // Step 2: Configure Razorpay payment options\r\n      const options = {\r\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID, \r\n        amount: orderAmount, // Amount is already in paise (received from backend)\r\n        currency: currency,\r\n        name: 'Charity Donation',\r\n        description: 'Donate to charity',\r\n        order_id: orderId,\r\n        handler: async (response) => {\r\n          try {\r\n            await axios.post(\r\n              'http://localhost:5000/api/donations',\r\n              {\r\n                amount: orderAmount / 100, // Convert amount from paise to rupees for storing in the database\r\n                charityId,\r\n                razorpayPaymentId: response.razorpay_payment_id,\r\n                razorpayOrderId: response.razorpay_order_id,\r\n                razorpaySignature: response.razorpay_signature,\r\n              },\r\n              {\r\n                headers: {\r\n                  Authorization: `Bearer ${token}`,\r\n                },\r\n              }\r\n            );\r\n\r\n            alert('Donation successful!');\r\n            navigate('/donations'); // Redirect to donations list page\r\n          } catch (error) {\r\n            console.error('Error completing donation:', error);\r\n            alert('Error completing donation. Please try again.');\r\n          }\r\n        },\r\n        prefill: {\r\n          name: '', // Optionally prefill with user's name and email\r\n          email: '',\r\n        },\r\n        theme: {\r\n          color: '#3399cc',\r\n        },\r\n      };\r\n\r\n      // Step 4: Open the Razorpay payment window\r\n      const paymentObject = new window.Razorpay(options);\r\n      paymentObject.open();\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      alert('Error creating donation order. Please try again.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-donation\">\r\n      <h1>Add Donation</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Amount (INR)\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Charity ID\"\r\n          value={charityId}\r\n          onChange={(e) => setCharityId(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Add Donation</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddDonation;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}